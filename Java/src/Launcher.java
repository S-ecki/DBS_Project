import java.io.BufferedReader; 
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class Launcher {

	static DatabaseHelper dbhelper = new DatabaseHelper();
	static CSVHelper csvhelper = new CSVHelper();
	static RandomHelper rh = new RandomHelper();
	
	public static void main(String args[]) {
		
		dbhelper.deleteAllEntries();	//clear database to prevent unique constraint violations
		
		
		
//primary keys of tables get stored in <x>Keys list to dynamically determine foreign keys for relations	
//if primary key is stored inside csv, directly add to list (no query to database needed)
//if primary key is created by database (trigger/generated as identity), query the db
		
//INSERT TRAINEE
		
		List<String[]> traineeInput = csvhelper.getDataFromCsv("C:\\Coding\\Workspace\\DBS\\src\\input\\trainee.csv");	//TODO relative path
		List<String> traineeKeys = new ArrayList<>();	
		
		for(String[] tupel: traineeInput) {
			dbhelper.insertTrainee(tupel[0], tupel[1], tupel[2], tupel[3], tupel[4], tupel[5], tupel[6]);
			traineeKeys.add(tupel[0]);	//svnr
		}
		
		
//INSERT TRAINER
		
		List<String[]> trainerInput = csvhelper.getDataFromCsv("C:\\Coding\\Workspace\\DBS\\src\\input\\trainer.csv");	//TODO relative path
		List<String> trainerKeys = new ArrayList<>();
		
		for(String[] tupel: trainerInput) {
			dbhelper.insertTrainer(tupel[0], tupel[1], tupel[2], tupel[3], tupel[4], tupel[5], tupel[6], tupel[7]);
			trainerKeys.add(tupel[5]);	//t_id
		}
		
		
//INSERT STUDIO
		
		List<String[]> studioInput = csvhelper.getDataFromCsv("C:\\Coding\\Workspace\\DBS\\src\\input\\studio.csv");	//TODO relative path
		List<String[]> studioKeys = new ArrayList<>();
		
		for(String[] tupel: studioInput) {
			dbhelper.insertStudio(tupel[0], tupel[1], tupel[2], tupel[3], tupel[4], tupel[5]);
			studioKeys.add(Arrays.copyOfRange(tupel, 0, 3));	//plz, strasse, land
		}
		
		System.out.println("here1");
//INSERT INTO TRAINING
		
		//every trainee joins a training - relation
		//studio is mandatory
		//existence of trainer is decided randomly (may be NULL)
		//sessions per week are chosen randomly for each relation
		for(String trainee: traineeKeys) {
			
			String[] studio = studioKeys.get(rh.randomInteger(0, studioKeys.size()-1));		//choose random studio
			
			if(rh.randomBool()) {	//with trainer
				String trainer = trainerKeys.get(rh.randomInteger(0, trainerKeys.size()-1));
				dbhelper.insertTraining(trainee, studio[0], studio[1], studio[2], trainer, rh.randomInteger(1, 7));
			}
			else {	//without trainer
				dbhelper.insertTraining(trainee, studio[0], studio[1], studio[2], null, rh.randomInteger(1, 7));
			}
		}
		System.out.println("here2");
		
//INSERT GERAET
		
		//perhaps less geraete
		List<String[]> geraetInput = csvhelper.getDataFromCsv("C:\\Coding\\Workspace\\DBS\\src\\input\\geraet.csv");	//TODO relative path
		List<String[]> geraetKeys = new ArrayList<>();
		
		for(String[] tupel: geraetInput) {
		 	String[] foreignKey = studioKeys.get(rh.randomInteger(0, studioKeys.size()-1));		//get random studio for "besitzt" relation
 			dbhelper.insertGeraet(tupel[0], tupel[1], tupel[2], tupel[3], foreignKey[0], foreignKey[1], foreignKey[2]);
			geraetKeys.add(Arrays.copyOfRange(tupel, 0, 2));	//firma, seriennr
		}
		
		
//INSERT UEBUNG
		
		//connect every uebung to 3 different geraete
		List<String[]> uebungInput = csvhelper.getDataFromCsv("C:\\Coding\\Workspace\\DBS\\src\\input\\uebung.csv");	//TODO relative path
		List<String[]> uebungKeys = new ArrayList<>();
				
		for(String[] tupel: uebungInput) {
			//get 3 different random integers 
			//they determine, which 3 geraete get connected to 1 uebung
			int[] random = rh.nRandomIntegers(0, geraetKeys.size()-1, 3);	//insert arbitrary amount of geraet-conntection: change 3 to n
			
			//get random geraet for "ermoeglicht" relation and partial key for weak uebung
			for(int i = 0; i < random.length; ++i) {
				String[] foreignKey = geraetKeys.get(random[i]);
				dbhelper.insertUebung(foreignKey[0], foreignKey[1], tupel[0], tupel[1], tupel[2]);
				uebungKeys.add(dbhelper.concatenate(foreignKey, tupel[0]));		//firma, seriennr, ue_name
			}
		}
				
		
//INSERT MUSKEL
		
		List<String[]> muskelInput = csvhelper.getDataFromCsv("C:\\Coding\\Workspace\\DBS\\src\\input\\muskel.csv");	//TODO relative path
		
		for(String[] tupel: muskelInput) {
			dbhelper.insertMuskel(tupel[0], tupel[1]);
		}
		
		List<String> muskelKeys = dbhelper.selectIdFromMuskel();	//query needed to get keys (generated by sql)
		
		
//INSERT INTO KONDITIONIERT
		
		//relation consists of uebung + muskel
		//connect every muskel with 4 different uebungen
		for(String muskel: muskelKeys) {
			int[] random = rh.nRandomIntegers(0, uebungKeys.size()-1, 4);	//for arbitrary amount of relations: change 4 to n
			
			for(int i = 0; i < random.length; ++i) {
				String[] uebung = uebungKeys.get(random[i]);
				dbhelper.insertKonditioniert(muskel, uebung[0], uebung[1], uebung[2]);
			}
		}
		
		
		
		dbhelper.countAll();
		dbhelper.close();
	  }		
	
}
