--IS-A of Superclass Sportler with 2-Table-Solution (Trainer, Trainee) 

CREATE TABLE trainee(
    svnr        INTEGER,
    sp_name     VARCHAR(100) NOT NULL,
    geschlecht  CHAR DEFAULT 'd',
    groesse     FLOAT,
    gewicht     FLOAT,
    zielgewicht FLOAT,
    erfahrung   INTEGER DEFAULT 1,
    CONSTRAINT trainee_pk PRIMARY KEY (svnr),
    CONSTRAINT trainee_erfahrung CHECK (erfahrung BETWEEN 1 AND 10),
    CONSTRAINT trainee_geschlecht CHECK(geschlecht IN('m', 'f', 'd'))
);

CREATE TABLE trainer(
    svnr        INTEGER UNIQUE NOT NULL,
    sp_name     VARCHAR(100) NOT NULL,
    geschlecht  CHAR DEFAULT 'd',
    groesse     FLOAT,
    gewicht     FLOAT,
    t_id        INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 1111,
    t_kosten    INTEGER,
    schwerpunkt VARCHAR(100),
    CONSTRAINT trainer_pk PRIMARY KEY (t_id),
    CONSTRAINT trainer_kosten CHECK(t_kosten > 0 || NULL),
    CONSTRAINT trainer_geschlecht CHECK(geschlecht IN('m','f','d'))
);

CREATE TABLE studio( 
    plz         INTEGER,
    strasse     VARCHAR(100),
    land        VARCHAR(100),
    st_name     VARCHAR(100) NOT NULL,
    st_kosten   INTEGER,
    flaeche     FLOAT DEFAULT 0,
    CONSTRAINT studio_pk PRIMARY KEY (plz, strasse, land),
    CONSTRAINT studio_kosten CHECK (st_kosten > 0 || NULL),
    CONSTRAINT studio_flaeche CHECK(flaeche >= 0)
);

CREATE TABLE geraet(
    firma       VARCHAR(100),
    seriennr    INTEGER GENERATED BY DEFAULT AS IDENTITY START WITH 111111,
    g_name      VARCHAR(100) NOT NULL,
    g_kosten    INTEGER,
    plz         INTEGER,
    strasse     VARCHAR(100),
    land        VARCHAR(100),
    CONSTRAINT geraet_pk PRIMARY KEY (firma, seriennr),
    CONSTRAINT geraet_fk FOREIGN KEY (plz, strasse, land) REFERENCES studio ON DELETE CASCADE,
    CONSTRAINT geraet_kosten CHECK (g_kosten > 0)
);

CREATE TABLE uebung(
    firma       VARCHAR(100),
    seriennr    INTEGER,
    ue_name     VARCHAR(100) NOT NULL,
    schwierigkeit   INTEGER,
    wiederholungen INTEGER DEFAULT 8,
    CONSTRAINT uebung_pk PRIMARY KEY (firma, seriennr, ue_name),
    CONSTRAINT uebung_fk FOREIGN KEY (firma, seriennr) REFERENCES Geraet (firma, seriennr) ON DELETE CASCADE,
    CONSTRAINT uebung_schwierigkeit CHECK(schwierigkeit BETWEEN 1 AND 10)
);

CREATE TABLE muskel(
    m_id        INTEGER,    --created with trigger
    bezeichnung VARCHAR(100) UNIQUE NOT NULL,
    mv          INTEGER,
    CONSTRAINT muskel_pk PRIMARY KEY (m_id)  
);

CREATE TABLE trainingspartner(
    svnr1       INTEGER,
    svnr2       INTEGER,
    CONSTRAINT tp_pk PRIMARY KEY (svnr1, svnr2),
    CONSTRAINT tp_fk1 FOREIGN KEY (svnr1) REFERENCES trainee(svnr) ON DELETE CASCADE,
    CONSTRAINT tp_fk2 FOREIGN KEY (svnr2) REFERENCES trainee(svnr) ON DELETE CASCADE,
    CONSTRAINT tp_different CHECK(svnr1 != svnr2)
);

CREATE TABLE training(      --ternary relation 1:1:m
    svnr        INTEGER,
    plz         INTEGER,
    strasse     VARCHAR(100),
    land        VARCHAR(100),
    t_id        INTEGER,
    sessions_woche     INTEGER DEFAULT 3,
    CONSTRAINT training_pk PRIMARY KEY (svnr, plz, strasse, land),      --makes sure, that only 1 trainer can be possible for studio - trainee pair
    CONSTRAINT training_fk1 FOREIGN KEY (svnr) REFERENCES trainee ON DELETE CASCADE,
    CONSTRAINT training_fk2 FOREIGN KEY (plz, strasse, land) REFERENCES studio ON DELETE CASCADE,
    CONSTRAINT training_fk3 FOREIGN KEY (t_id) REFERENCES trainer ON DELETE CASCADE,
    CONSTRAINT training_ternary UNIQUE (svnr, t_id),                    --makes sure, that only 1 studio can be possible for trainer - trainee pair
    CONSTRAINT training_sessions CHECK(sessions_woche BETWEEN 0 AND 7)
);

CREATE TABLE konditioniert(
    m_id        INTEGER, 
    firma       VARCHAR(100),
    seriennr    INTEGER,
    ue_name     VARCHAR(100),
    CONSTRAINT kond_pk PRIMARY KEY (m_id, firma, seriennr, ue_name),
    CONSTRAINT kond_fk1 FOREIGN KEY (m_id) REFERENCES muskel ON DELETE CASCADE,
    CONSTRAINT kond_fk2 FOREIGN KEY (firma, seriennr, ue_name) REFERENCES uebung ON DELETE CASCADE
);


--sequence + Trigger
CREATE SEQUENCE m_id_seq 
start with 1;

CREATE OR REPLACE TRIGGER m_id_trigger
  BEFORE INSERT 
    ON muskel
    FOR EACH ROW
BEGIN
  SELECT m_id_seq.nextval
  INTO :new.m_id
  FROM dual;
END;
/


--procedure
CREATE OR REPLACE PROCEDURE delete_muskel(p_m_id  IN  INTEGER, p_error_code OUT NUMBER)
AS
  BEGIN
    DELETE  
    FROM muskel
    WHERE p_m_id = muskel.m_id;

    p_error_code := SQL%ROWCOUNT;
    IF (p_error_code = 1)
    THEN
      COMMIT;
    ELSE
      ROLLBACK;
    END IF;
    EXCEPTION
    WHEN OTHERS
    THEN
       p_error_code := SQLCODE;
  END delete_muskel;
/ 


--zeigt anzahl der geraete in studios innerhalb österreichs an
CREATE VIEW geraeteanzahl_oe AS 
SELECT st_name, COUNT(g.seriennr) as Anzahl_Geraete
FROM geraet g INNER JOIN studio s ON g.plz=s.plz AND g.strasse=s.strasse AND g.land=s.land
GROUP BY st_name, s.land
HAVING s.land = 'Österreich'
ORDER BY COUNT(g.seriennr);

--View zählt anzahl der trainer und trainees,
--und wie viele unterschiedliche sportler es gibt (manche trainer können auch trainees sein)
CREATE VIEW counter AS
SELECT COUNT(t_id) as Anzahl_Trainer, COUNT(t1.svnr) AS Anzahl_trainee, COUNT(*) AS Anzahl_Sportler
FROM trainee t1
FULL JOIN trainer t2
ON t1.svnr = t2.svnr;

